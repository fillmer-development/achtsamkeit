{"version":3,"sources":["store/constants.js","store/store.js","store/reducers.js","store/actions.js","notes/moments.js","notes/notes.js","App.js","serviceWorker.js","index.js"],"names":["ACTIONS","datastring","localStorage","getItem","data","JSON","parse","undefined","store","createStore","combineReducers","moment","state","type","payload","console","log","note","subscribe","stringify","getState","setItem","setMoment","text","Moments","_input","setTimeout","innerHTML","contentEditable","ref","v","onBlur","dispatch","defaultValue","className","Notes","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.af440b42.chunk.js","sourcesContent":["export const ACTIONS = {\n    SET_MOMENT: \"SET_MOMENT\",\n    SET_NOTE: \"SET_NOTE\"\n}\n\nexport const CONFIG = {\n    LOCALSTORAGE: \"achtsamkeit-store\"\n}","import { createStore, combineReducers } from 'redux'\nimport { CONFIG } from './constants'\nimport { moment, note } from './reducers'\n\nconst { LOCALSTORAGE } = CONFIG\n\nconst datastring = localStorage.getItem(LOCALSTORAGE)\nconst data = datastring ? JSON.parse(datastring) : undefined\n\nexport const store = createStore(combineReducers({\n    moment, note\n}), data)\n\nstore.subscribe(() => {\n    const state = JSON.stringify(store.getState())\n    localStorage.setItem(LOCALSTORAGE, state)\n})","import { ACTIONS } from \"./constants\"\n\nexport const moment = (state = {}, { type, ...payload }) => {\n    console.log(payload)\n    switch (type) {\n        case ACTIONS.SET_MOMENT:\n            return { ...state, ...payload }\n        default:\n            return state\n    }\n}\n\nexport const note = (state = {}, { type, ...payload }) => {\n    console.log(payload)\n    switch (type) {\n        case ACTIONS.SET_NOTE:\n            return { ...state, ...payload }\n        default:\n            return state\n    }\n}\n","import { ACTIONS } from \"./constants\";\n\nexport const setMoment = text => ({ type: ACTIONS.SET_MOMENT, text })\n\nexport const setNote = text => ({ type: ACTIONS.SET_NOTE, text })","import React from 'react'\nimport { store } from '../store/store'\nimport { setMoment } from '../store/actions';\nimport './moments.css'\n\nexport const Moments = () => {\n    let _input;\n    const { text = \"\" } = store.getState().moment\n\n    const save = () => {\n        console.log(_input)\n        store.dispatch(\n            setMoment(_input.innerHTML)\n        )\n    }\n    const init = () => _input.innerHTML = text\n    setTimeout(init, 200)\n    return (\n        <div>\n            <h2>Glasmomente</h2>\n            <div contentEditable\n                ref={v => _input = v}\n                onBlur={save}\n                defaultValue={text}\n                className=\"theme-d1 moment w3-round w3-mobile w3-padding\">\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport { store } from '../store/store'\nimport { setMoment } from '../store/actions';\nimport './notes.css'\n\nexport const Notes = () => {\n    let _input;\n    const { text = \"\" } = store.getState().note\n\n    const save = () => {\n        console.log(_input)\n        store.dispatch(\n            setMoment(_input.innerHTML)\n        )\n    }\n    const init = () => _input.innerHTML = text\n    setTimeout(init, 200)\n    return (\n        <div>\n            <h2>Notizen</h2>\n            <div contentEditable\n                ref={v => _input = v}\n                onBlur={save}\n                defaultValue={text}\n                className=\"theme-l1 note w3-round w3-mobile w3-padding\">\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport { Moments } from './notes/moments'\nimport { Notes } from './notes/notes';\n\nfunction App() {\n  return (\n    <div className=\"app w3-container\">\n      <Moments />\n      <Notes />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\nimport 'w3-css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}